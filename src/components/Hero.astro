---
import background from "../assets/background.webp";
import Container from "../layouts/Container";
---

<Container id="hero" classNames="mt-12 mb-24 relative max-w-7xl lg:max-w-8xl rounded-md">
  <div id="hero-container" class="relative h-[90vh] overflow-hidden rounded-md">
    {/* Background with effects */}
    <div class="absolute inset-0 z-0">
      <div id="parallax-image" class="relative w-full h-full">
        <img
          class="w-full h-full object-cover object-[center_65%] rounded-md"
          src={background.src}
          alt="Architectural visualization"
          fetchpriority="high"
        />
      </div>
      
      {/* Dark overlay with radial transparency */}
      <div class="absolute inset-0 radial-dark-overlay"></div>
      
      {/* Spotlight effect */}
      <div id="spotlight" class="absolute inset-0 pointer-events-none mix-blend-soft-light">
        <div class="absolute spotlight-glow opacity-0 transition-opacity duration-500"></div>
      </div>
      
      {/*x-blend-soft-light opacity-30">
        <div class="particles absolute inset-0"></div>
      </div>

      {/* Bottom dark overlay for smooth transition */}
      <div class="absolute bottom-0 left-0 right-0 h-32 bg-gradient-to-t from-darkgray to-transparent"></div>
    </div>

    {/* Main Content */}
    <main class="relative z-10 h-[90vh]">
      {/* Company Info */}
      <div class="absolute top-24 left-0 right-0 text-center px-6 md:px-0">
        <h2 class="text-[4rem] font-kuunari-bold text-white leading-none drop-shadow-[0_2px_10px_rgba(0,0,0,0.4)] animate-fade-in-down">
          Export<span class="text-accent-500">3d</span>.
        </h2>
        <div class="mt-3 flex flex-col md:flex-row items-center justify-center gap-2 text-[21.5px] tracking-[0.5px] font-kuunari-medium animate-fade-in-up">
          <button
            id="service-viz"
            class="service-btn text-accent-500 transition-all duration-300 hover:text-white active"
            data-heading="Visualiza el futuro"
            data-description="Transformamos tus ideas en experiencias visuales impactantes"
          >
            Visualización Arquitectónica
          </button>
          <span class="opacity-50 text-white hidden md:block">/</span>
          <span class="md:hidden w-8 h-px bg-white/50 my-2"></span>
          <button
            id="service-proj"
            class="service-btn text-white/90 transition-all duration-300 hover:text-white"
            data-heading="Construye el mañana"
            data-description="Materializamos tus sueños con excelencia y precisión"
          >
            Proyecto y Dirección de Obra
          </button>
        </div>
      </div>

      {/* Hero Content - Centered in viewport */}
      <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-full px-8 lg:px-20">
        <div class="max-w-4xl mx-auto text-center">
          {/* Main heading */}
          <div class="flex flex-col items-center animate-fade-in-up-delayed">
            <h1 id="main-heading" class="text-[5rem] lg:text-[7rem] text-white leading-none font-kuunari-bold tracking-tight drop-shadow-[0_4px_20px_rgba(0,0,0,0.4)]">
              <span class="heading-text"></span>
              <br />
              <span class="heading-text bg-gradient-to-r from-accent-500 to-accent-400 text-transparent bg-clip-text"></span>
            </h1>
            <p id="heading-description" class="mt-8 text-xl text-white/90 text-[22.5px] tracking-[.7px] font-kuunari-light max-w-2xl description-text">
              Transformamos tus ideas en experiencias visuales impactantes
            </p>
          </div>
        </div>
      </div>

      {/* Scroll indicator */}
      <div class="absolute bottom-8 left-0 right-0 flex justify-center z-20 animate-fade-in-up-last">
        <button 
          class="scroll-to-about flex flex-col items-center gap-2 text-white/80 hover:text-white transition-colors duration-300 group"
        >
          <span class="text-sm uppercase tracking-widest font-kuunari-regular">Explorar</span>
          <div class="w-px h-12 bg-gradient-to-b from-accent-500 to-transparent scroll-line"></div>
        </button>
      </div>

      {/* Wave divider */}
      <div class="absolute -bottom-1 left-0 right-0 w-full z-10 overflow-hidden">
        <svg class="relative block w-full h-[180px]" viewBox="0 0 1200 120" preserveAspectRatio="none">
          <path 
            d="M600,0L400,60L200,30L0,40L0,120L1200,120L1200,40L1000,30L800,60L600,0Z" 
            class="fill-darkgray divider-pattern"
          ></path>
          <path 
            d="M600,20L450,70L250,45L0,50L0,120L1200,120L1200,50L950,45L750,70L600,20Z" 
            class="fill-darkgray/70 divider-pattern"
          ></path>
          <path 
            d="M600,40L500,80L300,60L0,65L0,120L1200,120L1200,65L900,60L700,80L600,40Z" 
            class="fill-darkgray/40 divider-pattern"
          ></path>
        </svg>
      </div>

      {/* Additional dark gradient for smooth transition */}
      <div class="absolute bottom-0 left-0 right-0 h-48 bg-gradient-to-t from-darkgray via-darkgray/80 to-transparent z-[5]"></div>
    </main>
  </div>
</Container>

<script>
  const heroContainer = document.getElementById('hero-container') as HTMLDivElement;
  const spotlight = document.getElementById('spotlight')?.querySelector('.spotlight-glow') as HTMLDivElement;
  
  if (heroContainer && spotlight) {
    let spotlightTimeout: number;

    heroContainer.addEventListener('mousemove', (e) => {
      const rect = heroContainer.getBoundingClientRect();
      
      // Update spotlight
      clearTimeout(spotlightTimeout);
      const cursorX = e.clientX - rect.left - 400;
      const cursorY = e.clientY - rect.top - 400;
      spotlight.style.opacity = '1';
      spotlight.style.transform = `translate3d(${cursorX}px, ${cursorY}px, 0)`;
    });

    heroContainer.addEventListener('mouseleave', () => {
      spotlight.style.opacity = '0';
      spotlightTimeout = setTimeout(() => {
        spotlight.style.transform = 'translate(-100%, -100%)';
      }, 500);
    });
  }

  class ServiceRotator {
    private buttons: NodeListOf<Element>;
    private currentIndex: number;
    private interval: number | null;
    private isHovered: boolean;
    private readonly INTERVAL_TIME = 4000;

    constructor(buttons: NodeListOf<Element>) {
      this.buttons = buttons;
      this.currentIndex = 0;
      this.interval = null;
      this.isHovered = false;
      
      // Cleanup any existing intervals
      if (window.serviceRotatorInterval) {
        clearInterval(window.serviceRotatorInterval);
      }
      
      this.init();
    }

    private init() {
      // Add hover listeners only to non-active buttons
      this.updateHoverListeners();

      // Start rotation
      this.start();

      // Add cleanup listeners
      window.addEventListener('beforeunload', () => this.stop());
      document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
          this.stop();
        } else {
          this.start();
        }
      });
    }

    private updateHoverListeners() {
      // Remove existing listeners first
      this.buttons.forEach(button => {
        button.removeEventListener('mouseenter', this.handleMouseEnter.bind(this));
        button.removeEventListener('mouseleave', this.handleMouseLeave.bind(this));
      });

      // Add new listeners only to non-active buttons
      this.buttons.forEach((button, index) => {
        if (!button.classList.contains('active')) {
          button.addEventListener('mouseenter', this.handleMouseEnter.bind(this));
          button.addEventListener('mouseleave', this.handleMouseLeave.bind(this));
        }
      });
    }

    private handleMouseEnter = () => {
      if (!this.isHovered) {
        this.isHovered = true;
        this.stop();
      }
    }

    private handleMouseLeave = () => {
      if (this.isHovered) {
        this.isHovered = false;
        this.start();
      }
    }

    private rotate = () => {
      if (this.isHovered) return;
      this.currentIndex = (this.currentIndex + 1) % this.buttons.length;
      const button = this.buttons[this.currentIndex] as HTMLButtonElement;
      if (button) {
        button.click();
        this.updateHoverListeners();
      }
    }

    public start() {
      if (this.interval || this.isHovered) return;
      
      // Clear any existing interval first
      if (window.serviceRotatorInterval) {
        clearInterval(window.serviceRotatorInterval);
      }
      
      // Start new interval
      this.interval = window.setInterval(this.rotate, this.INTERVAL_TIME);
      window.serviceRotatorInterval = this.interval;
    }

    public stop() {
      if (this.interval) {
        clearInterval(this.interval);
        this.interval = null;
        window.serviceRotatorInterval = null;
      }
    }

    public handleManualClick(clickedButton: Element) {
      // Find the index of the clicked button
      const clickedIndex = Array.from(this.buttons).indexOf(clickedButton);
      if (clickedIndex === -1) return;

      // Set the current index to the clicked button
      this.currentIndex = clickedIndex;

      // Reset the interval
      this.stop();
      this.start();
    }
  }

  // Add type declaration for the global window object
  declare global {
    interface Window {
      serviceRotatorInterval: number | null;
    }
  }
  window.serviceRotatorInterval = null;

  // Service selection and text animation
  const serviceButtons = document.querySelectorAll('.service-btn');
  const mainHeading = document.getElementById('main-heading');
  const headingDescription = document.getElementById('heading-description');
  let currentAnimation: Animation | null = null;

  // Initialize service rotator
  const rotator = new ServiceRotator(serviceButtons);

  // Función para crear los spans de letras
  function createLetterSpans(text: string, className: string = '') {
    return text.split('').map(letter => 
      `<span class="letter-animation ${className} opacity-0">${letter === ' ' ? '&nbsp;' : letter}</span>`
    ).join('');
  }

  // Función para animar las letras
  function animateLetters(container: HTMLElement, delay: number = 30) {
    const letters = container.querySelectorAll('.letter-animation');
    letters.forEach((letter, index) => {
      if (letter instanceof HTMLElement) {
        setTimeout(() => {
          letter.style.opacity = '1';
          letter.style.transform = 'translateY(0)';
        }, index * delay);
      }
    });
  }

  serviceButtons.forEach(button => {
    button.addEventListener('click', () => {
      // Update active states
      serviceButtons.forEach(btn => {
        btn.classList.remove('text-accent-500', 'active');
        btn.classList.add('text-white/90');
      });
      button.classList.remove('text-white/90');
      button.classList.add('text-accent-500', 'active');

      // Handle manual click in rotator
      rotator.handleManualClick(button);

      // Get new text content
      const heading = button.getAttribute('data-heading')?.split(' ') || [];
      const description = button.getAttribute('data-description') || '';

      // Cancel current animation if exists
      if (currentAnimation) {
        currentAnimation.cancel();
      }

      // Animate text out
      const elements = document.querySelectorAll('.heading-text');
      elements.forEach(el => {
        if (el instanceof HTMLElement) {
          el.style.opacity = '0';
        }
      });
      
      const descriptionEl = document.querySelector('.description-text');
      if (descriptionEl instanceof HTMLElement) {
        descriptionEl.style.opacity = '0';
      }

      // Animate text in
      setTimeout(() => {
        // Update content
        const [firstLine, ...restLines] = heading;
        const headingHTML = `
          <div class="heading-text inline-block">
            ${createLetterSpans(firstLine)}
          </div>
          <br />
          <div class="heading-text inline-block bg-gradient-to-r from-accent-500 to-accent-400 text-transparent bg-clip-text">
            ${createLetterSpans(restLines.join(' '))}
          </div>
        `;
        
        if (mainHeading) {
          mainHeading.innerHTML = headingHTML;
          
          // Animate each line with different delays
          const headingLines = mainHeading.querySelectorAll('.heading-text');
          headingLines.forEach((line, index) => {
            if (line instanceof HTMLElement) {
              setTimeout(() => {
                animateLetters(line, 30);
              }, index * 500); // 500ms delay between lines
            }
          });
        }

        if (headingDescription) {
          headingDescription.textContent = description;
          setTimeout(() => {
            if (headingDescription instanceof HTMLElement) {
              headingDescription.style.opacity = '1';
            }
          }, 1000); // Start after main text animation
        }
      }, 400);
    });
  });

  // Observador para detectar cuando el contenedor principal aparece
  const mainHeadingContainer = document.querySelector('.animate-fade-in-up-delayed');
  if (mainHeadingContainer) {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const mainHeading = document.getElementById('main-heading');
          if (mainHeading) {
            // Crear los spans de letras para el texto inicial
            const headingLines = mainHeading.querySelectorAll('.heading-text');
            const initialText = ['Visualiza', 'el futuro'];
            
            headingLines.forEach((line, index) => {
              if (line instanceof HTMLElement) {
                line.innerHTML = createLetterSpans(initialText[index]);
                setTimeout(() => {
                  animateLetters(line, 30);
                }, index * 500);
              }
            });
          }
        }
      });
    }, { threshold: 0.1 });

    observer.observe(mainHeadingContainer);
  }

  // Scroll to services functionality
  const scrollButton = document.querySelector('.scroll-to-about');
  const servicesSection = document.getElementById('about');

  if (scrollButton && servicesSection) {
    scrollButton.addEventListener('click', () => {
      const rect = servicesSection.getBoundingClientRect();
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      // Offset específico para dejar espacio arriba
      const offset = -120;
      window.scrollTo({
        top: rect.top + scrollTop + offset,
        behavior: 'smooth'
      });
    });
  }
</script>

<style>
  /* Particle animation */
  .particles {
    background-image: 
      radial-gradient(circle at center, white 0.5px, transparent 0.5px),
      radial-gradient(circle at center, white 0.5px, transparent 0.5px);
    background-size: 40px 40px;
    background-position: 0 0, 20px 20px;
    animation: particleFloat 20s linear infinite;
  }

  @keyframes particleFloat {
    0% {
      transform: translateY(0) translateX(0);
    }
    25% {
      transform: translateY(-10px) translateX(10px);
    }
    50% {
      transform: translateY(0) translateX(0);
    }
    75% {
      transform: translateY(10px) translateX(-10px);
    }
    100% {
      transform: translateY(0) translateX(0);
    }
  }

  /* Radial dark overlay */
  .radial-dark-overlay {
    background: radial-gradient(
      circle at center,
      rgba(16, 16, 16, 0.2) 0%,
      rgba(16, 16, 16, 0.3) 40%,
      rgba(16, 16, 16, 0.6) 100%
    );
  }

  /* Spotlight effect */
  .spotlight-glow {
    width: 800px;
    height: 800px;
    border-radius: 50%;
    background: radial-gradient(
      circle at center,
      rgba(255, 255, 255, 0.25) 0%,
      rgba(255, 255, 255, 0.15) 20%,
      rgba(255, 255, 255, 0.1) 30%,
      transparent 70%
    );
    transform-origin: center;
    will-change: transform, opacity;
    pointer-events: none;
  }

  /* Scroll line animation */
  .scroll-line {
    animation: scrollPulse 2s ease-in-out infinite;
  }

  @keyframes scrollPulse {
    0%, 100% { transform: scaleY(0.5); opacity: 0.5; }
    50% { transform: scaleY(1); opacity: 1; }
  }

  /* Divider pattern and animation */
  .divider-pattern {
    mask-image: url("data:image/svg+xml,%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle cx='1' cy='1' r='0.5' fill='%23000'/%3E%3C/svg%3E");
    mask-size: 12px 12px;
    animation: patternFloat 15s linear infinite;
  }

  @keyframes patternFloat {
    0% {
      mask-position: 0 0;
    }
    100% {
      mask-position: 100px 0;
    }
  }

  /* Service button styles */
  .service-btn {
    position: relative;
    border-radius: 0.25rem;
    transition: all 0.3s ease;
    display: inline-block;
    text-align: center;
  }

  .service-btn::after {
    content: '';
    position: absolute;
    bottom: -1.5px;
    left: 0;
    width: 100%;
    height: 2px;
    background: currentColor;
    transition: all 0.3s ease;
  }

  .service-btn:not(.active) {
    text-shadow: 0 0 8px rgba(0, 0, 0, 0.5);
  }

  .service-btn:not(.active):hover {
    text-shadow: 0 0 12px rgba(0, 0, 0, 0.7);
  }

  .service-btn.active {
    text-shadow: 0 0 8px rgba(0, 0, 0, 0.7);
  }

  .service-btn.active:hover {
    color: #f9c461;
    text-shadow: 0 0 12px rgba(0, 0, 0, 0.8);
  }

  .service-btn.active::after {
    width: 100%;
  }

  /* Letter animation styles */
  .letter-animation {
    display: inline-block;
    transform: translateY(20px);
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  /* Text container styles */
  .heading-text {
    display: inline-block;
  }

  .description-text {
    transition: opacity 0.6s ease;
  }

  /* Animation keyframes */
  @keyframes fadeInDown {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Animation classes */
  .animate-fade-in-down {
    animation: fadeInDown 0.8s ease-out forwards;
  }

  .animate-fade-in-up {
    animation: fadeInUp 0.8s ease-out 0.3s forwards;
    opacity: 0;
  }

  .animate-fade-in-up-delayed {
    animation: fadeInUp 0.8s ease-out 1.3s forwards;
    opacity: 0;
  }

  .animate-fade-in-up-last {
    animation: fadeInUp 0.8s ease-out 2.1s forwards;
    opacity: 0;
  }
</style>

