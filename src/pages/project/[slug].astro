---
import * as fs from 'fs';
import * as path from 'path';
import Layout from '../../layouts/Layout.astro';
import ProjectPage from '../../components/ProjectPage.tsx';
import { projects } from '../../data/data';

export async function getStaticPaths() {
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: { project },
  }));
}

const { slug } = Astro.params;

// Ruta absoluta a la carpeta de imágenes del proyecto
const imagesDir = path.join(process.cwd(), 'public', 'assets', 'projects', slug);

// Lee los archivos de la carpeta (si existe)
let galleryImages: { original: string; thumbnail: string }[] = [];
try {
  const files = fs.readdirSync(imagesDir);
  galleryImages = files
    .filter((f: string) => f.endsWith('-full.webp'))
    .map((f: string) => {
      const idx = f.match(/gallery-(\d+)-full\.webp$/)?.[1];
      return {
        original: `/assets/projects/${slug}/${f}`,
        thumbnail: `/assets/projects/${slug}/${slug}-gallery-${idx}-thumb.webp`
      };
    })
    .sort((a: any, b: any) => {
      const getIdx = (img: any) => parseInt(img.original.match(/gallery-(\d+)-full\.webp$/)?.[1] ?? 0, 10);
      return getIdx(a) - getIdx(b);
    });
} catch (e) {
  // Si la carpeta no existe, deja el array vacío
}

const project = projects.find(p => p.slug === slug);
if (!project) throw new Error('Project not found');
---

<Layout>
  <ProjectPage client:load slug={slug} galleryImages={galleryImages} />
</Layout> 