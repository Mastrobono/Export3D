---
import ProjectPage from "../../../components/ProjectPage.tsx";
import { projects } from "../../../data/data.ts";
import Layout from "../../../layouts/Layout.astro";
import * as path from 'path';
import * as fs from 'fs';
import { getLangFromUrl } from '../../../i18n/utils';

// Validar que el idioma sea válido
const lang = getLangFromUrl(Astro.url);
if (lang !== 'es' && lang !== 'en') {
  return Astro.redirect('/es/projects');
}


const { slug } = Astro.params;
console.log(lang, slug);

const project = projects.find((p) => p.slug === slug);
if (!project) {
    throw new Error("Proyecto no encontrado");
}

// Ruta absoluta a la carpeta de imágenes del proyecto
const imagesDir = path.join(process.cwd(), 'public', 'assets', 'projects', slug as string);

// Lee los archivos de la carpeta (si existe)
let galleryImages: { original: string; thumbnail: string }[] = [];
try {
  const files = fs.readdirSync(imagesDir);
  galleryImages = files
    .filter((f: string) => f.endsWith('-full.webp'))
    .map((f: string) => {
      const idx = f.match(/gallery-(\d+)-full\.webp$/)?.[1] ?? '0';
      return {
        original: `/assets/projects/${slug}/${f}`,
        thumbnail: `/assets/projects/${slug}/${slug}-gallery-${idx}-thumb.webp`
      };
    })
    .sort((a: any, b: any) => {
      const getIdx = (img: any) => parseInt(img.original.match(/gallery-(\d+)-full\.webp$/)?.[1] ?? '0', 10);
      return getIdx(a) - getIdx(b);
    });
} catch (e) {
  // Si la carpeta no existe, usa la imagen principal como fallback
  galleryImages = [{
    original: project.image.src,
    thumbnail: project.image.src
  }];
}
---

<Layout>
    <ProjectPage
        lang={lang as 'es' | 'en'}
        slug={slug as string}
        project={project}
        galleryImages={galleryImages}
        client:load
    />
</Layout>
